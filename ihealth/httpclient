var http = require("http");
var config = require("./oauth2/config");
var tokenMgr = require("./oauth2/TokenManager");

/**
 * A generic http client that handles the communication with remote APIs
 * All subsequent operations made using the current instance are done on behalf of the user
 * @class Client
 * @constructor
 * @param {Object} [dto] : needed parameters
 * @param {String} [dto.username]: the name of the targeted user. This is used to retrieve the access token.
 * @param {Object}[dto.sessionMgr] : an instance of SessionManager. If provided, informs the client that it should
 * use session-based authentication instead of OAuth token.
 */
function HttpClient(dto) {
  
  this.username = dto ? dto.username :  "";
  this.accessToken = tokenMgr.getPersistedTokens(this.username).accessToken;
}

/**
 * Invoke a given API. If response status is 401, the method will try to obtain a new access token using the 
 * current user's refresh token and retry the invocation of the target API.
 * This method can throw exceptions
 * @method callApi
 * @param {Object} params : the parameters of the http call to issue
 * 	{String} params.endpoint : the url of the targeted API
 *	{String} params.method : (optional) the http method to use when invoking the API
 *	{Object} params.headers: (optional) the http headers to send to the API
 *	{Object} params.params: (optional) the parameters that are expected by the API
 */
HttpClient.prototype.callApi = function(params) {
  
  var paramsClone = JSON.parse(JSON.stringify(params));
  try {   
     return this._callApi(paramsClone);
  }catch(responseBlock) { // could be all response or response.body
     
    if (responseBlock.status == "401" || responseBlock.ErrorCode == 4001) { 
     
      this._refreshToken();
      try {
        return this._callApi(paramsClone);
      }catch(response) {
        this._handleError(response);
      }
    }else {
      this._handleError(responseBlock);
    }   
  }
};

HttpClient.prototype._callApi = function(params) {
 
  if (!params.params){
    params.params = {};
  }
  
  params.params.client_id = config.client_id;
  params.params.client_secret = config.client_secret;
  params.params.access_token = this.accessToken; 
  params.url = config.apiUrl + params.url;
 
  if (!params.method || params.method.toLowerCase() == "get") {
    params.params = this._paramsToString(params.params);
  }
  
  //console.log("Request " +  JSON.stringify(params));
  var response = http.request(params);
  //console.log("Received following response  : " + JSON.stringify(response));
  if (response.status >= "200" && response.status < "300") {
    
    if (response.body && response.body != null) {
      
      var responseBody = JSON.parse(response.body);
      if (responseBody.Error) {
        throw responseBody;
      } else {
        return responseBody;
      }
    }
    else {
      return response;
    }
  } else {
    throw response;
  }
};
  
HttpClient.prototype._handleError = function(response) {
   
  var errorObj = "";
  try {
    
    errorObj = JSON.parse(response.body);
  }catch(e) {
    
    try {
      errorObj = JSON.parse(response);
    }catch(e) {
      errorObj = response;
    }
  };

  throw {
    "errorCode": "Invocation_Error",
    "errorDetail": errorObj
  };
};

HttpClient.prototype._refreshToken = function() {
 
  console.log("Refreshing token for " +  this.username);
  tokenMgr.refreshAccessToken(this.username);
  this.accessToken = tokenMgr.getPersistedTokens(this.username).accessToken;
};

/*
 * Transform all Numeric and boolean parameters to string so they can be passed to http.callApi
 * (shallow only)
 */
HttpClient.prototype._paramsToString = function(params) {
  
  var newParams = {};
  for (var p in params) {
    
    if (typeof(params[p]) != "object") {
    	newParams[p] = "" +  params[p];
    }else {
      newParams[p] = JSON.stringify(params[p]);
    }
  }
  
  return newParams;
};
